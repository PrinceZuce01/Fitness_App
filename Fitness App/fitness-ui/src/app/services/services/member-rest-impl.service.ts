/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewMember } from '../fn/member-rest-impl/add-new-member';
import { AddNewMember$Params } from '../fn/member-rest-impl/add-new-member';
import { deleteMember } from '../fn/member-rest-impl/delete-member';
import { DeleteMember$Params } from '../fn/member-rest-impl/delete-member';
import { getAllMember } from '../fn/member-rest-impl/get-all-member';
import { GetAllMember$Params } from '../fn/member-rest-impl/get-all-member';
import { getMemberById } from '../fn/member-rest-impl/get-member-by-id';
import { GetMemberById$Params } from '../fn/member-rest-impl/get-member-by-id';
import { Member } from '../models/member';
import { MemberWrapper } from '../models/member-wrapper';
import { updateMember } from '../fn/member-rest-impl/update-member';
import { UpdateMember$Params } from '../fn/member-rest-impl/update-member';

@Injectable({ providedIn: 'root' })
export class MemberRestImplService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateMember()` */
  static readonly UpdateMemberPath = '/member/updateMember';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMember$Response(params: UpdateMember$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return updateMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMember(params: UpdateMember$Params, context?: HttpContext): Observable<string> {
    return this.updateMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addNewMember()` */
  static readonly AddNewMemberPath = '/member/addNewMember';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewMember()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewMember$Response(params: AddNewMember$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return addNewMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewMember$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewMember(params: AddNewMember$Params, context?: HttpContext): Observable<string> {
    return this.addNewMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getMemberById()` */
  static readonly GetMemberByIdPath = '/member/getMemberById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMemberById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById$Response(params: GetMemberById$Params, context?: HttpContext): Observable<StrictHttpResponse<MemberWrapper>> {
    return getMemberById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMemberById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMemberById(params: GetMemberById$Params, context?: HttpContext): Observable<MemberWrapper> {
    return this.getMemberById$Response(params, context).pipe(
      map((r: StrictHttpResponse<MemberWrapper>): MemberWrapper => r.body)
    );
  }

  /** Path part for operation `getAllMember()` */
  static readonly GetAllMemberPath = '/member/getAllMember';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMember$Response(params?: GetAllMember$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Member>>> {
    return getAllMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMember(params?: GetAllMember$Params, context?: HttpContext): Observable<Array<Member>> {
    return this.getAllMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Member>>): Array<Member> => r.body)
    );
  }

  /** Path part for operation `deleteMember()` */
  static readonly DeleteMemberPath = '/member/deleteMember/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMember()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember$Response(params: DeleteMember$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteMember(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMember$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMember(params: DeleteMember$Params, context?: HttpContext): Observable<string> {
    return this.deleteMember$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
